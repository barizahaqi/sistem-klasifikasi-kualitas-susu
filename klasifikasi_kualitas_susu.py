# -*- coding: utf-8 -*-
"""Klasifikasi Kualitas Susu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSLyClgpWgt6xjboAf1GCpmkfxs9c0FB
"""

! pip install kaggle

from google.colab import drive
drive.mount('/content/gdrive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/gdrive/MyDrive/Kaggle"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Kaggle

! kaggle datasets download -d cpluzshrijayan/milkquality

! unzip \*.zip && rm *.zip

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier

# load the dataset
milk = pd.read_csv('milknew.csv')
milk

"""Berdasarkan Informasi di atas didapat:

*   Ada 1059 baris atau records dalam dataset.
*   Terdapat 8 kolom yaitu: pH, Temprature, Taste, Odor, Fat, Turbidity, Colour, Grade.


"""

# Ganti nama kolom Temprature menjadi Temperature agak mudah dipahami
milk.rename(columns={'Temprature': 'Temperature'}, inplace=True)

milk.info()

"""Dari output terlihat bahwa:

*   Terdapat 1 kolom numerik dengan tipe float64 yaitu: pH.
*   Terdapat 6 kolom numerik dengan tipe data int64, yaitu: Temprature, Taste, Odor, Fat, Turbidity, Colour.
*   Terdapat 1 kolom dengan tipe object, yaitu: Grade. Kolom ini merupakan target fitur ini

"""

milk.describe()

"""Pada tabel di atas diperlihatkan informasi statistik pada masing masing kolom, antara lain:

*   Count  adalah jumlah sampel pada data.
*   Mean adalah nilai rata-rata.
*   Std adalah standar deviasi.
*   Min yaitu nilai minimum setiap kolom. 
*   25% adalah kuartil pertama. Kuartil adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama. 
*   50% adalah kuartil kedua, atau biasa juga disebut median (nilai tengah).
*   75% adalah kuartil ketiga.
Max adalah nilai maksimum.

"""

milk.isnull().sum()

"""Tidak ada data yang bernilai null sehingga penanganan missing value tidak diperlukan"""

sns.boxplot(x=milk['pH'])

sns.boxplot(x=milk['Temperature'])

sns.boxplot(x=milk['Colour'])

"""Pada diagram di atas terdapat outlier pada kolom pH, Temprature dan Colour sehingga harus diatasi terlebih dahulu"""

Q1 = milk.quantile(0.25)
Q3 = milk.quantile(0.75)
IQR = Q3-Q1
milk = milk[~((milk<(Q1-1.5*IQR))|(milk>(Q3+1.5*IQR))).any(axis=1)]

#Cek ukuran setelah dilakukan drop outliers
milk.shape

"""Sekarang tersisa 648 sampel dalam dataset milknew-nya"""

#bagi semua kolom menjadi 2 bagian yaitu numerik dan kategori
numerical_features = ['pH', 'Temperature', 'Colour']
categorical_features = ['Taste', 'Odor', 'Fat', 'Turbidity', 'Grade']

feature = categorical_features[0]
count = milk[feature].value_counts()
percent = 100*milk[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel': count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Dari diagram di atas disimpulkan bahwa sampel yang memiliki rasa yang enak (bernilai 1) lebih banyak dibandingkan dengan sampel yang memiliki rasa tidak enak (bernilai 0)."""

feature = categorical_features[1]
count = milk[feature].value_counts()
percent = 100*milk[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel': count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Dari diagram di atas disimpulkan bahwa sampel yang memiliki bau yang tidak enak (bernilai 1) lebih banyak dibandingkan dengan sampel yang tidak memiliki bau yang tidak enak (bernilai 0)."""

# karena terdapat whitespace pada judul column fat, hapus terlebih dahulu whitespace-nya
milk.columns = milk.columns.str.strip()

feature = categorical_features[2]
count = milk[feature].value_counts()
percent = 100*milk[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel': count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Dari diagram di atas disimpulkan bahwa sampel yang memiliki lemak tinggi (bernilai 1) lebih banyak dibandingkan dengan sampel yang memiliki lemak rendah (bernilai 0)."""

feature = categorical_features[3]
count = milk[feature].value_counts()
percent = 100*milk[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel': count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Dari diagram di atas disimpulkan bahwa sampel yang memiliki kekentalan rendah (bernilai 0) lebih banyak dibandingkan dengan sampel yang memiliki kekentalan tinggi (bernilai 0)."""

feature = categorical_features[4]
count = milk[feature].value_counts()
percent = 100*milk[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel': count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Terdapat 3 kategori pada fitur Grade, secara berurutan dari jumlahnya yang paling banyak yaitu: medium, high, dan low. Dari data persentase dapat kita simpulkan bahwa lebih dari 50% sampel merupakan susu tipe grade medium."""

milk[numerical_features].hist(bins=50, figsize=(20,15))
plt.show()

"""Dari informasi diatas didapat beberapa kesimpulan yaitu semua diagram tidak terdistribusi merata. 
*   Pada Diagram ph sampel terbagi menjadi 4 bagian dengan kenaikan mendekati 0.1 tiap bagian. 
*   Pada diagram Temperature, distribusi miring ke kiri (left-skewed) dengan nilai tertinggi berada di sekitar nilai 45
*   Pada diagram colour sebagian besar sampel memiliki nilai colour dikisaran 255 


"""

features = milk[numerical_features]
 
for col in features:
  sns.catplot(x='Grade', y=col, kind="bar", dodge=False, height = 4, aspect = 3,  data=milk, palette="Set3")
  plt.title("Rata-rata {} relatif terhadap grade:".format(col))

"""Pada diagram di atas, rata-rata colour dan ph cenderung mirip dengan rentang yang hampir sama. Rata-rata temperature pada grade low memiliki rata-rata yang tinggi yaitu sekitar 50 sedangkan pada grade medium dam high memiliki rata-rata temperature yang hampir sama."""

# Bagi sampel dataset menjadi 80% dataset latih dan 20% dataset test

X = milk.drop(["Grade"], axis = 1)
y = milk["Grade"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)

print(f'Total sampel pada dataset latih: {len(X_train)}')
print(f'Total sampel pada dataset test: {len(X_test)}')

# Lakukan proses scaling dengan StandardScaler pada data numerik
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['score'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

# Lakukan analisis menggunakan K-Nearest Neighbor
knn = KNeighborsClassifier(n_neighbors=5)

# Latih model
knn.fit(X_train, y_train)
models.loc['score', 'KNN'] = cross_val_score(knn, X_train, y_train, scoring="accuracy", cv= 5).mean()

# Lakukan analisis menggunakan Random Forest
rf = RandomForestClassifier(n_estimators=20, max_depth=16, random_state=43, n_jobs=-1)

# Latih model
rf.fit(X_train, y_train)
models.loc['score','RandomForest'] = cross_val_score(rf, X_train, y_train, scoring="accuracy", cv= 5).mean()

# Lakukan analisis menggunakan AdaBoost
boosting = AdaBoostClassifier(learning_rate=0.05, random_state=43)

# Latih model                            
boosting.fit(X_train, y_train)
models.loc['score','Boosting'] = cross_val_score(boosting, X_train, y_train, scoring="accuracy", cv= 5).mean()

models

"""Dari hasil di atas didapat bahwa random forest memberikan rata-rata hasil akurasi yang sangat besar untuk klasifikasi kualiatas susu. Sehingga model yang akan dipilih adalah random forest"""

# Evaluasi akurasi model
result_accuracy = cross_val_score(rf, X_test, y_test, scoring="accuracy", cv= 5).mean()
result_accuracy

"""Dari hasil evaluasi dapat disimpulkan bahwa algoritma random forest sangat cocok digunakan sebagai model dalam proyek ini dengan akurasi sekitar 0.977"""